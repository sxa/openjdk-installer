NODE_LABEL = "dockerBuild&&linux&&x64" // Dynamic docker machines from Azure

pipeline {
    agent {
        label NODE_LABEL
    }
    stages {
        stage('Linux-x64 Installers') {
            matrix {
                agent {
                    label NODE_LABEL
                }
                tools {
                    jdk "JDK11"
                }
                axes {
                    axis {
                        name 'DISTRO'
                        values 'Debian', 'RedHat', 'Suse'
                    }
                }
                stages {
                    stage('Build Installer') {
                        steps {
                            echo "Installer Job for Temurin ${VERSION} - ${DISTRO}"
                            setup()
                            dir('linuxNew') {
                                buildAndTest()
                            }
                            uploadArtifacts()
                        }
                    }
                }
	    }
        }
        stage('Run non-x64 Deb packaging in parallel') {
            parallel {
                stage('aarch64 Debian packages') {
                    agent {
                        label "docker&&linux&&aarch64"
                    }
                    tools {
                        jdk "JDK11"
                    }
                    environment {
                        DISTRO = "Debian"
                    }
                    steps {
                        echo "Debian Installer Job for Temurin ${VERSION} - ${DISTRO} on aarch64"
                        setup()
                        dir('linuxNew') {
                            buildNoTest()
                        }
                        uploadArtifacts()
                    }
                }
                stage('ppc64le Debian packages') {
                    agent {
                        label "docker&&linux&&ppc64le"
                    }
                    tools {
                        jdk "JDK11"
                    }
                    environment {
                        DISTRO = "Debian"
                    }
                    steps {
                        echo "Debian Installer Job for Temurin ${VERSION} - ${DISTRO} on ppc64le"
                        setup()
                        dir('linuxNew') {
                            buildNoTest()
                        }
                        uploadArtifacts()
                    }
                }
                stage('s390x Debian packages') {
                    when {
                       expression {
                          return VERSION != '8'
                       }
                    }
                    agent {
                        label "docker&&linux&&s390x"
                    }
                    tools {
                        jdk "JDK11"
                    }
                    environment {
                        DISTRO = "Debian"
                        DOCKER_BUILDKIT = "0"
                    }
                    steps {
                        echo "Debian Installer Job for Temurin ${VERSION} - ${DISTRO} so s390x"
                        setup()
                        dir('linuxNew') {
                            buildNoTest()
                        }
                        uploadArtifacts()
                    }
                }
            }
        }
    }
}

def setup() {
    cleanWs()
    // Docker --mount option requires BuildKit
    env.DOCKER_BUILDKIT=1
    env.COMPOSE_DOCKER_CLI_BUILD=1
    env._JAVA_OPTIONS="-Xmx4g"
    checkout scm
}

def buildAndTest() {
    // Install Adoptium GPG key for RPM signing
    withCredentials([file(credentialsId: 'adoptium-artifactory-gpg-key', variable: 'GPG_KEY')]) {
        if (DISTRO != "Debian") {
            sh("./gradlew packageJdk${DISTRO} checkJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION} -PGPG_KEY=${GPG_KEY}")
        } else {
            sh("./gradlew packageJdk${DISTRO} checkJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION}")
        }
    }
    archiveArtifacts artifacts: '**/build/ospackage/*,**/build/reports/**,**/packageTest/dependencies/deb/*'
}

def buildNoTest() {
    // Install Adoptium GPG key for RPM signing
    withCredentials([file(credentialsId: 'adoptium-artifactory-gpg-key', variable: 'GPG_KEY')]) {
        if (DISTRO != "Debian") {
            sh("./gradlew packageJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION} -PGPG_KEY=${GPG_KEY}")
        } else {
            sh("./gradlew packageJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION}")
        }
    }
    archiveArtifacts artifacts: '**/build/ospackage/*,**/build/reports/**,**/packageTest/dependencies/deb/*'
}

def uploadArtifacts() {
    echo "tests"
}
